&НаКлиенте
Перем Клиент, АдресВоВременномХранилище;

&НаСервере
Функция ПолучитьАдресМакетаКомпановкиНаСервере(УникальныйИдентификатор)
	
	МакетВнешнейКомпоненты    = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ВнешняяКомпонента");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты, УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаКлиенте
Процедура ПодключитьКомпонентуКлиент(КомпонентаПодключена = Неопределено)
	
	АдресВоВременномХранилище = ПолучитьАдресМакетаКомпановкиНаСервере(ЭтаФорма.УникальныйИдентификатор);
	
	УстановитьВнешнююКомпоненту(АдресВоВременномХранилище);
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
	Сообщить(НСтр("ru = 'Компонента подключена!'"));
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКомпонентуКлиент()
	
	Если Клиент = Неопределено Тогда
		Если Не ИнициализироватьКомпонентуКлиентСервер(Клиент) Тогда
			
			ПодключитьКомпонентуКлиент();
			ИнициализироватьКомпонентуКлиентСервер(Клиент);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Клиент;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнициализироватьКомпонентуКлиентСервер(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура Отправка(Команда)
	
	ИмяОчереди = "rpc_queue";
	Клиент.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
	Клиент.ReplyTo = "result.method.queue";
	
	ОтправляемоеСообщение = "Hello World!";
	routingKey = ИмяОчереди;
	livingTime = 0;
	persist = Истина;
	Клиент.BasicPublish("", routingKey, ОтправляемоеСообщение, 0, persist);
	Сообщить("Отправлено 'Hello World!'");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Сервер = "192.168.57.2";
	Порт = 5672;
	Пользователь = "rmuser";
	Пароль = "rmpassword";
	ВиртуальныйХост = "/";
	
КонецПроцедуры


&НаКлиенте
Процедура Получение(Команда)
	
	ИмяОчереди = "hello";
	Клиент.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
	
	ОтветноеСообщение = "";
	ТегСообщения = 0;
	
	noConfirm = Истина;
	exclusive = Ложь;
	Потребитель = Клиент.BasicConsume(ИмяОчереди, "", noConfirm, exclusive, 0);
	Пока Клиент.BasicConsumeMessage("", ОтветноеСообщение, ТегСообщения, 5000) Цикл
		Сообщить("Успешно! Из очереди прочитано сообщение " + ОтветноеСообщение);
		ОтветноеСообщение = ""; // Обнуляем, чтобы избежать утечку памяти
		ТегСообщения = 0; // Обнуляем, чтобы избежать утечку памяти
	КонецЦикла;
	Клиент.BasicCancel("");
    
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправкаСПараметром(Команда)

	ПолучитьКомпонентуКлиент();
	Клиент.Connect(Сервер, Порт, Пользователь, Пароль, ВиртуальныйХост);
	
	ИмяОчереди = "hello";
	Клиент.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
	
	ОтправляемоеСообщение = "Hello World!";
	
	Для Сч = 1 По 5 Цикл
		ОтправляемоеСообщение1 = ОтправляемоеСообщение + " " + Сч + ".";		
		
		
		routingKey = ИмяОчереди;
		Клиент.BasicPublish("", routingKey, ОтправляемоеСообщение1, 0, Ложь);
		Сообщить("Отправлено " + ОтправляемоеСообщение1);
		
	КонецЦикла;
		
КонецПроцедуры



&НаКлиенте
Процедура ПолучениеСЗадержкой() Экспорт
	
	ОтветноеСообщение = "";
	ТегСообщения = 0;
	Пока Клиент.BasicConsumeMessage("", ОтветноеСообщение, ТегСообщения, 5000) Цикл
		Если Не ПустаяСтрока(ОтветноеСообщение) Тогда
			Сообщить("Из очереди прочитано сообщение " + ОтветноеСообщение);
			//Клиент.BasicAck(ТегСообщения);
			ОтветноеСообщение = ""; // Обнуляем, чтобы избежать утечку памяти
			ТегСообщения = 0; // Обнуляем, чтобы избежать утечку памяти	
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Процедура СделатьПаузу(ЗадержкаСекунд = 3)
	
    Если ЗадержкаСекунд = 0 Тогда
        Возврат
	КонецЕсли;
	
	КомандаWindows = "Timeout /T " + Формат(ЗадержкаСекунд, "ЧГ=0") + " /NoBreak";
	WshShell = Новый COMОбъект("WScript.Shell"); 
	WshShell.Run(КомандаWindows, 0, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеСЗадержкойЦикл(Команда)
	
	ИмяОчереди = "hello";
	onlyCheckIfExists = Ложь;
	save = Истина;
	exclusive = Ложь;
	autodelete = Ложь;
	Клиент.DeclareQueue(ИмяОчереди, onlyCheckIfExists, save, exclusive, autodelete);
	
	noConfirm = Истина;
	exclusive = Ложь;
	selectSize = 1;
	Потребитель = Клиент.BasicConsume(ИмяОчереди, "", noConfirm, exclusive, selectSize);
	
	ИмяОчереди = "hello";
	
	ПодключитьОбработчикОжидания("ПолучениеСЗадержкой", 10);
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПолучитьКомпонентуКлиент();
	Клиент.Connect(Сервер, Порт, Пользователь, Пароль, ВиртуальныйХост);
	
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Клиент = Неопределено;
КонецПроцедуры


&НаКлиенте
Процедура ОтключитьПолучениеСЗадержкой(Команда)
	ОтключитьОбработчикОжидания("ПолучениеСЗадержкой");
	Клиент.BasicCancel("");
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьУдаленннуюПроцедуру(Команда)
	
	НомерСеанса = Формат(НомерСеансаИнформационнойБазы(), "ЧГ=");
	
	
	
КонецПроцедуры

